DROP TABLE IF EXISTS `award`;
CREATE TABLE `award` (
  `id` int NOT NULL AUTO_INCREMENT,
  `type_id` int NOT NULL,
  `giver_id` int DEFAULT NULL COMMENT 'can be null if giver wants to remain anonymous',
  `comment_id` int DEFAULT NULL COMMENT 'can be null if award is for post ',
  `post_id` int DEFAULT NULL COMMENT 'can be null if award is for comment',
  `date` date NOT NULL,
  PRIMARY KEY (`id`),
  KEY `award_ibfk_2` (`giver_id`),
  KEY `award_ibfk_3` (`comment_id`),
  KEY `award_ibfk_4` (`post_id`),
  CONSTRAINT `award_ibfk_1` FOREIGN KEY (`id`) REFERENCES `award_reference` (`award_id`) ON DELETE CASCADE,
  CONSTRAINT `award_ibfk_2` FOREIGN KEY (`giver_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE,
  CONSTRAINT `award_ibfk_3` FOREIGN KEY (`comment_id`) REFERENCES `comment` (`comment_id`) ON DELETE CASCADE,
  CONSTRAINT `award_ibfk_4` FOREIGN KEY (`post_id`) REFERENCES `post` (`post_id`) ON DELETE CASCADE,
  CONSTRAINT `award_chk_1` CHECK (((`comment_id` is not null) or (`post_id` is not null))),
  CONSTRAINT `CheckOnlyOneColumnIsNull` CHECK ((((case when (`comment_id` is null) then 0 else 1 end) + (case when (`post_id` is null) then 0 else 1 end)) = 1))) 

INSERT INTO `award` VALUES (1,1,4,3,NULL,'2020-08-30'),(2,3,1,NULL,1,'2020-09-02');

DROP TABLE IF EXISTS `award_reference`;
CREATE TABLE `award_reference` (
  `award_id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `gold` int NOT NULL,
  `image_url` varchar(200) NOT NULL,
  PRIMARY KEY (`award_id`),
  UNIQUE KEY `award_UNIQUE` (`name`)
);


INSERT INTO `award_reference` VALUES (1,'Gold',500,'https://i.redd.it/4osxoc5mp5h21.jpg'),(2,'Silver',100,'https://www.redditstatic.com/desktop2x/img/gold/badges/award-silver-large.png'),(3,'Platinum',1800,'https://www.redditstatic.com/desktop2x/img/gold/badges/award-platinum-large.png');

DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `comment_id` int NOT NULL AUTO_INCREMENT,
  `text` varchar(10000) NOT NULL,
  `upvotes` int NOT NULL DEFAULT '1',
  `downvotes` int DEFAULT '0',
  `parent_comment_id` int DEFAULT NULL COMMENT 'parent comment id can be NULL if there is no parent to the comment ie the comment is a direct reply to the post',
  `parent_post_id` int DEFAULT NULL,
  `author_id` int NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`comment_id`),
  KEY `comment_ibfk_1_idx` (`parent_comment_id`),
  KEY `comment_ibfk_2_idx` (`parent_post_id`),
  KEY `comment_ibfk_3` (`author_id`),
  CONSTRAINT `comment_ibfk_1` FOREIGN KEY (`parent_comment_id`) REFERENCES `comment` (`comment_id`) ON DELETE CASCADE,
  CONSTRAINT `comment_ibfk_2` FOREIGN KEY (`parent_post_id`) REFERENCES `post` (`post_id`) ON DELETE CASCADE,
  CONSTRAINT `comment_ibfk_3` FOREIGN KEY (`author_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE,
  CONSTRAINT `CheckOnlyOneColumnIsNullComment` CHECK ((((case when (`parent_comment_id` is null) then 0 else 1 end) + (case when (`parent_post_id` is null) then 0 else 1 end)) = 1)),
  CONSTRAINT `parent_not_null` CHECK (((`parent_comment_id` is not null) or (`parent_post_id` is not null))),
  CONSTRAINT `text_not_empty` CHECK ((`text` <> _utf8mb4''))
)

INSERT INTO `comment` VALUES (1,'this post is very funny',4,0,NULL,1,1,'2020-09-02'),(2,'this comment is very funny!',2,1,1,NULL,2,'2020-09-03'),(3,'I think you should talk to a councellor',40,3,NULL,4,3,'2020-08-30'),(4,'I think this is great advice!',20,1,3,NULL,4,'2020-09-01');


DROP TABLE IF EXISTS `post`;
CREATE TABLE `post` (
  `post_id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `body` varchar(10000) NOT NULL DEFAULT '',
  `upvotes` int NOT NULL DEFAULT '1',
  `downvotes` int NOT NULL DEFAULT '0',
  `subreddit_id` int NOT NULL COMMENT 'Subreddit ID is not required as you can post in a subreddit or on your wall.',
  `author_id` int NOT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`post_id`),
  KEY `post_ibfk_1` (`subreddit_id`),
  KEY `post_ibfk_2` (`author_id`),
  CONSTRAINT `post_ibfk_1` FOREIGN KEY (`subreddit_id`) REFERENCES `subreddit` (`subreddit_id`),
  CONSTRAINT `post_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE,
  CONSTRAINT `title_not_empty` CHECK ((`title` <> _utf8mb4''))
);

INSERT INTO `post` VALUES (1,'This is a funny post!','A very funny post body',10,3,1,1,'2020-09-01'),(2,'New league of legends champion released!','Yone was released today',6800,390,2,4,'2020-05-10'),(3,'very cool pic','https://verycoolpic.com',46,1,3,3,'2020-07-10'),(4,'My marriage is breaking up','Can someone giive me some advice',100,10,4,2,'2020-08-29');

DROP TABLE IF EXISTS `subreddit`;
CREATE TABLE `subreddit` (
  `subreddit_id` int NOT NULL AUTO_INCREMENT,
  `handle` varchar(100) DEFAULT NULL,
  `followers` int DEFAULT NULL,
  `title` varchar(100) DEFAULT NULL,
  `online` int DEFAULT NULL,
  PRIMARY KEY (`subreddit_id`),
  UNIQUE KEY `name_UNIQUE` (`handle`)
);

INSERT INTO `subreddit` VALUES (1,'funny',34000000,'funny content here!',25000),(2,'leagueoflegends',4500000,'League of Doublelift',20400),(3,'pics',26300000,'Reddit Pics',19600),(4,'relationship_advice',4000000,'Relationship Advice',8200);


DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `user_id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(45) NOT NULL,
  `comment_karma` int NOT NULL DEFAULT '0',
  `post_karma` int NOT NULL DEFAULT '0',
  `avatar_url` varchar(200) NOT NULL DEFAULT 'https://www.reddit.com/',
  `cake_day` date NOT NULL,
  PRIMARY KEY (`user_id`)
);

INSERT INTO `user` VALUES (1,'randomredditor',100,200,'https://www.google.com','2019-01-12'),(2,'coolcakes',1000,2000,'https://www.google.com/2','2018-03-10'),(3,'redditiscool',69,420,'https://www.google.com/3','2020-01-10'),(4,'throwaway2',1885,13441,'https://picsum.photos/id/237/200/300','2013-05-01');


DROP TABLE IF EXISTS `user_follower`;
CREATE TABLE `user_follower` (
  `id` int NOT NULL AUTO_INCREMENT,
  `date` date NOT NULL,
  `user_id` int NOT NULL,
  `follower_id` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `follower_id` (`follower_id`),
  KEY `user_follower_ibfk_1` (`user_id`),
  CONSTRAINT `user_follower_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`) ON DELETE CASCADE,
  CONSTRAINT `user_follower_ibfk_2` FOREIGN KEY (`follower_id`) REFERENCES `user` (`user_id`),
  CONSTRAINT `Follow_self` CHECK ((`user_id` <> `follower_id`))
);

INSERT INTO `user_follower` VALUES (6,'2020-02-10',1,2),(8,'2020-04-10',4,2),(9,'2020-06-28',2,1),(10,'2020-03-20',3,2);


