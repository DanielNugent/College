THEORY LProduct
IMPORT-THEORY Equality
IMPORT-THEORY Arithmetic
IMPORT-THEORY List
IMPORT-HASKELL List

THEOREM prod_mul

    product (xs++ys)   ==   product xs * product ys

STRATEGY Induction xs :: List

BASE []
    product ([]++ys)   ==   product [] * product ys

STRATEGY ReduceAll

product ([]++ys)   ==   product [] * product ys
 = DEF ++.1
product ys   ==   product [] * product ys
 = DEF product.1 @ product 2
product ys  ==  1 * product ys
 = LAW mul_left_unit l2r @ * 1
product ys  ==  product ys
 = LAW eq_refl
True
QED BASE

STEP (x:xs)

ASSUME
        product (xs++ys)   ==   product xs * product ys

SHOW
        product ((x:xs)++ys)   ==   product (x:xs) * product ys

STRATEGY ReduceBoth

LHS

product((x:xs)++ys)
= DEF ++.2
    product(x:(xs ++ ys))
= DEF product.2
    x * product(xs ++ ys)

RHS

product (x:xs) * product ys
= DEF product.2
    x * product(xs) * product(ys)
= LAW mul_assoc r2l
    x * (product(xs) * product(ys))
= INDHYP r2l @ * 2
 x * product(xs++ys)

QED STEP

QED prod_mul
