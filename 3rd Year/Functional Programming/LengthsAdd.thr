THEORY LengthsAdd

IMPORT-THEORY Arithmetic
IMPORT-HASKELL List

-- this file shows a proof by induction of
--        length (xs++xs)  =  length xs + length ys
-- This was done before 'prfchk' supported an induction strategy.

THEOREM lengths_add_base

            length ([]++ys)  ==  length [] + length ys

STRATEGY ReduceBoth

LHS

length ([]++ys)
 = DEF ++.1
length  ys

RHS

length [] + length ys
 = DEF length.1
0 + length ys
 = LAW add_left_unit l2r
length ys

QED lengths_add_base


-- what we are really proving
-- need it here as inductive hypothesis
LAW lengths_add
             length (xs++ys)   ==   length xs + length ys


THEOREM lengths_add_ind
         length ((x:xs)++ys)  ==  length (x:xs) + length ys

STRATEGY ReduceBoth

LHS

length ((x:xs)++ys)
 = DEF ++.2
length (x:(xs++ys))
 = DEF length.2
1 + length (xs++ys)
 = LAW lengths_add l2r @ length
1 + (length xs + length ys)

RHS

length (x:xs) + length ys
 = DEF length.2
(1 + length xs) + length ys
 = LAW add_assoc r2l
1 + (length xs + length ys)

QED lengths_add_ind
